# Theorie zu DAGs

```{r message=FALSE, warning=FALSE, echo=FALSE}
library(tidyverse)
library(easystats)
library(rstanarm)
library(ggthemes)
library(palmerpenguins)
library(gt)
library(ggdag)
library(dagitty)

gg_simple_dag <- function(d) {
  
  d %>% 
    ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
    geom_dag_point(color = "steelblue", alpha = 1/2, size = 6.5) +
    geom_dag_text(color = "black") +
    geom_dag_edges() + 
    theme_dag()
}
```

## Die vier Atome der Kausalanalyse

```{r}
#| echo: false
p_conf <- confounder_triangle(x = NULL, y = NULL, z = NULL, x_y_associated = FALSE) %>% 
  gg_simple_dag() +
  labs(title = "Die Konfundierung")
```

```{r}
#| echo: false
p_med <- 
  mediation_triangle(x = NULL, y = NULL, m = NULL, x_y_associated = FALSE) %>% 
  gg_simple_dag() +
  labs(title = "Die Mediation")
```

```{r}
#| echo: false
p_coll <- collider_triangle(x = NULL, y = NULL, m = NULL, x_y_associated = FALSE) %>% 
  gg_simple_dag() +
  labs(title = "Die Kollision")
```

```{r}
#| echo: false
dag_desc <- 
  dagitty('
          dag{
          
          m [pos="1.000,0.000"]
          x [exposure,pos="0.000,1.000"]
          y [outcome,pos="2.000,1.000"]
          d [pos="1,1"]

          x -> m
          y -> m
          m -> d
          }')

p_desc <-
  dag_desc %>%
  gg_simple_dag() +
  labs(title ="Der Nachfahre")
```

```{r}
#| echo: false
#| label: fig-four-atoms
#| fig-cap: Die vier Atome der Kausalinferenz
#| fig-width: 9
plots(p_conf, p_med, p_coll, p_desc, n_rows = 2)
```

Aufgabe: Von x zu y, also die Wirkung von X auf Y

### Die Konfundierung

Gabel, von einem Punkt gehen 2 Pfeile aus

üö∂\<---------- üï≥ -----------\> üèÅ

x \<---------- z -----------\> y

```         
          üåâ 
```

Vorstellung: Wir haben einen Pfad, der bei X startet und √ºber z zu y f√ºhrt. Man stelle sich vor, an der Stelle von z sei ein Loch, durch das Kontrollieren bauen wir eine Br√ºcke bzw. schlie√üen das Loch.

--\> Damit schlie√üt sich der Pfad

### Die Kollision

2 Pfeile treffen an einem Punkt aufeinander

üö∂----------\>üí£\<-----------üö´

x----------\> m \<----------- y

```         
          üåã
```

Vorstellung: Wir haben einen Pfad, der bei X startet und √ºber m zu y f√ºhrt. Man stelle sich vor, an der Stelle von m explodiert die Stra√üe (= Kollision), was tun wir jetzt? Wenn wir versuchen die Stra√üe zu reparieren, also zu kontrollieren, explodiert m immer wieder, wir k√∂nnen uns vorstellen, dass z.B. ein Vulkan an der Stelle immer wieder ausbricht.

--\> Hier d√ºrfen wir auf keinen Fall kontrollieren, in diesem Fall lassen wir alles so, wie es ist.

## Beispielaufgabe

```{r, echo=FALSE}
dag1 <- 
  "
dag {
x1
x2
x3
x4
x5
x6
x7
x1 -> x2
x1 -> x3
x1 -> x4
x1 -> x7
x2 -> x3
x2 -> x5
x2 -> x6
x3 -> x4
x3 -> x6
x3 -> x7
x4 -> x6
x5 -> x7
x6 -> x7
}"

graphLayout(dag1) %>% plot()
```

Gegeben sei der DAG `g` (s. u.). Der DAG verf√ºgt √ºber r `dag_size` Variablen, die als Knoten im Graph dargestellt sind (mit $x_1, x_2, \ldots x_n$ bezeichnet) und √ºber Kanten verbunden sind.

*Welche minimale Variablenmenge muss kontrolliert werden, um den kausalen Effekt von der UV zur AV zu identifizieren?*

UV: `x4`.

AV: `x5`.

*Hinweise*:

-   Mengen sind mittels geschweifter Klammern gekennzeichnet, z.B. `{x8, x9}` meint die Menge mit den zwei Elementen `x8` und `x9`.
-   Die leere Menge `{ }` bedeutet, dass keine Variable kontrolliert werden muss, um den kausalen Effekt zu identifizieren.
-   Alle Variablen werden als gemessen vorausgesetzt.
-   Es ist m√∂glich, dass es keine L√∂sung gibt, dass es also keine Adjustierungsmenge gibt, um den kausalen Effekt zu identifizieren. Wenn dies der Fall sein sollte, w√§hlen Sie "keine L√∂sung".
-   Es ist m√∂glich, dass einzelne Variablen keine Kanten besitzen, also keine Verbindung zu anderen Variablen (Knoten) haben.

Vorgehen:

1.  UV & AV identifizieren

UV ist bei diesem DAG `x4` und die AV ist `x5`

2.  Direkte kausale Pfade suchen

In diesem DAG gibt es keine direkten kausalen Pfade, also keine Pfeile, die direkt von `x4` zu `x5` f√ºhren, bei denen die Pfeilrichtung korrekt ist und es √ºber keine weiteren Variablen geht.

3.  M√∂gliche Hinterpfade suchen

Dieser DAG hat viele Hinterpfade, also Pfade, die von der UV √ºber weitere Variablen zur AV f√ºhren.

Ein Beispiel w√§re der Pfad von `x4` √ºber `x3`, `x1`, `x2` zu `x5`. Nat√ºrlich gibt es noch viel mehr M√∂glichkeiten.

4.  Welche Pfade soll man schlie√üen (= Konfundierung), welche soll man lassen (= Kollision)?

Wichtig ist es hierbei jeden Pfad einzeln f√ºr sich zu betrachten und nur bei dem zu betrachtenden Pfad auf die Pfeilrichtungen zu schauen.

Betrachtet man nun die Variable `x7`, dann sieht man, dass egal welchen Pfad man geht, bei `x7` immer eine Kollision entsteht. Also kann man alle Pfade, die √ºber `x7` f√ºhren ausschlie√üen und es darf nicht kontrolliert werden. `x6` ist damit auch ein Collider, da der einzige Pfad, der keine Kollision bei `x6` hat √ºber `x7` f√ºhrt, damit ist auch diese Variable ausgeschlossen.

Suchen wir jetzt nach Confoundern: Je nach Pfad, den man w√§hlt kann jede andere Variable, also `x1`, `x2` und `x3` (denn **UV und AV darf man nie kontrollieren**), ein Confounder sein.

Schauen wir uns ein Beispiel an: `x4` \<- `x1` -\> `x2` -\> `x5` Bei diesem Pfad w√§re `x1` der Confounder.

![DAG mit eingezeichneten Pfaden](DAG_Pfade.PNG) Alle Pfade mit Kollisionen sind hier rot gekennzeichnet, alle mit Confoundern gr√ºn.

5.  Die kleinste Menge finden

Wie finden wir jetzt die minimale Menge an Variablen, die wir kontrollieren m√ºssen, um alle Hintert√ºrpfade zu schlie√üen?

Das Gute ist, dass sobald man einen Confounder auf einem Pfad hat, es total egal ist, welche "Zwischen"-Variable man kontrolliert.

Hier anhand eines Beispiels: `x4` \<- `x1` -\> `x2` -\> `x5` Bei diesem Pfad w√§re `x1` zwar der Confounder, aber wir k√∂nnen stattdessen auch `x2` kontrollieren, da es f√ºr den Pfad und das Ergebnis egal ist, ob wir `x1` oder `x2` kontrollieren.

Genauso egal ist es, welchen Confounder man kontrolliert, wenn man mehrere Confounder auf einem Pfad hat, es reicht immer, **nur einen** zu kontrollieren.

Schauen wir jetzt, √ºber welche "Zwischen"-Variable alle Confounder-Pfade laufen m√ºssen: in diesem Fall w√§re das `x2`, also reicht es nur diese Variable zu kontrollieren, um alle Hintert√ºrpfade zu schlie√üen und den Effekt der UV auf die AV zu identifizieren.

## kausal03

::: panel-tabset
### A

Gegeben sei der DAG `g` (s.u.). Was ist die minimale Menge an Variablen, die man kontrollieren muss, um den kausalen Effekt von `x` auf `y` zu identifizieren?

```{r echo=FALSE}
dag2 <- dagitty::dagitty("dag {
    y <- x <- z1 <- v -> z2 -> y
    z1 <- w1 <-> w2 -> z2
    x <- w1 -> y
    x <- w2 -> y
    x [exposure]
    y [outcome]
  }"
) 

plot(graphLayout(dag2))

```

Hinweise:

-   Gebogene Kurven mit doppelter Pfeilspitze zeigen *keine* Kausaleinfl√ºsse ein (was in DAGs nicht erlaubt w√§re).
-   Stattdessen zeigen Sie eine Assoziation bedingt durch eine (nicht aufgef√ºhrte) Konfundierungsvariable an.

## Answerlist

-   { w1, w2, z2 }
-   { w2, z2 }
-   { w1, w2 }
-   { w1, z2 }
-   { w1 }

### L

Wir haben einen direkten kausalen Pfad zwischen `x` und `y` Ignorieren wir erstmal die gebogenen Pfeile und schauen uns dann zu allererst die Pfade an, die nur √ºber eine Zwischenvariable f√ºhren. Hier sehen wir, dass es nur 2 M√∂glichkeiten gibt, einmal √ºber `w1` und √ºber `w2`, beides sind Confounder, also m√ºssen wir beide auf jeden Fall kontrollieren.

Wir haben 2 Collider Pfade, einmal von `x` √ºber `w1`, `z1`, `v`, `z2` zu `y` und von `x` √ºber `z1`, `v`, `z2`, `w2` zu `y` (w√ºrden wir die beiden Pfade zu einem gro√üen kombinieren h√§tten wir theoretisch sogar noch einen Collider-Pfad). Diese Pfade k√∂nnen wir also von unseren √úberlegungen ausschlie√üen.

Suchen wir jetzt noch nach Confounder-Pfaden, die nicht √ºber `w1` oder `w2` f√ºhren. Es bleibt nur ein Pfad √ºbrig (von `x` √ºber `z1`, `v`, `z2` zu `y`). Der Confounder w√§re hier `v`, jedoch gibt es diese Antwortm√∂glichkeit nicht. Wie jedoch vorher erkl√§rt, ist es egal welche Zwischenvariable wir auf einem Confounder-Pfaf kontrollieren, hauptsachen wir kontrollieren eine. F√ºr diesen Pfad ist es also egal, ob wir `z1`, `v` oder `z2` kontrollieren.

Die L√∂sung w√§re also: { w1, w2, z2 }

Genauso richtig w√§re aber auch: { w1, w2, z1 } { w1, w2, v }
:::

## kausal29

::: panel-tabset
### A

Gegeben sei der DAG (Graph) `g` (s. u.). Der DAG verf√ºgt √ºber mehrere Variablen, die als Knoten im Graph dargestellt sind.

```{r dag-def, echo = TRUE}
f <-
  dagify(
    y ~ z + m,
    m ~ x + z,
    exposure = "x",
    outcome = "y"
  )
```

Hier ist die Definition des DAGs:

```{r}
cat(f)
```

Und so sieht er aus:

```{r echo = TRUE}
ggdag(f) + theme_dag_blank()
```

*Welche minimale Variablenmenge muss kontrolliert werden, um den kausalen Effekt von der UV zur AV zu identifizieren?*

UV: x

AV: y

*Hinweise*:

-   Mengen sind mittels geschweifter Klammern gekennzeichnet, z.B. `{x8, x9}` meint die Menge mit den zwei Elementen `x8` und `x9`.
-   Die leere Menge `{ }` bedeutet, dass keine Variable kontrolliert werden muss, um den kausalen Effekt zu identifizieren.
-   Alle Variablen werden als gemessen vorausgesetzt.
-   Es ist m√∂glich, dass es keine L√∂sung gibt, dass es also keine Adjustierungsmenge gibt, um den kausalen Effekt zu identifizieren. Wenn dies der Fall sein sollte, w√§hlen Sie "keine L√∂sung".

```{r echo = FALSE}
exposure_var <- "x"
outcome_var <- "y"
```

## Answerlist

-   {m}
-   {z}
-   {m, z}
-   { }
-   keine L√∂sung

### L

Man sieht direkt, dass man immer √ºber `m` gehen muss, um zu `y` zu gelangen. Betrachtet man den Pfad von `x` √ºber `m` zu `y`, dann sieht man, dass `m` hier ein Mediator ist, diese muss man nicht kontrollieren. Der zweite m√∂gliche Pfad f√ºhrt √ºber `m` und `z`, jedoch liegt hier bei `m` ein Collider vor, deswegen d√ºrfen wir in dem Fall weder `m` noch `z` kontrollieren.

Die L√∂sung ist also: { }, da wir keine Variable kontrollieren m√ºssen, um den Effekt von `x` auf `y` zu identifizieren.
:::

## kausal28

::: panel-tabset
### A

```{r echo=FALSE}
dag3 <- 
  "
dag {
x1
x2
x3
x4
x5
x6
x7
x8
x1 -> x3
x1 -> x4
x1 -> x5
x1 -> x6
x1 -> x7
x1 -> x8
x2 -> x3
x2 -> x4
x2 -> x5
x2 -> x6
x2 -> x7
x2 -> x8
x3 -> x4
x3 -> x5
x3 -> x6
x3 -> x7
x3 -> x8
x4 -> x5
x4 -> x6
x4 -> x7
x4 -> x8
x5 -> x6
x5 -> x7
x5 -> x8
x6 -> x7
x6 -> x8
x7 -> x8
}

"
exposure_var <- "x7"
outcome_var <- "x8"

dag_size <- 8

h <- dag3

graphLayout(h) %>% plot()
```

Gegeben sei der DAG `g` (s. u.). Der DAG verf√ºgt √ºber mehrere Variablen, die als Knoten im Graph dargestellt sind und mit $x_1, x_2, \ldots x_n$ bezeichnet sind.

*Welche minimale Variablenmenge muss kontrolliert werden, um den kausalen Effekt von der UV zur AV zu identifizieren?*

UV: `x7`.

AV: `x8`.

*Hinweise*:

-   Mengen sind mittels geschweifter Klammern gekennzeichnet, z.B. `{x8, x9}` meint die Menge mit den zwei Elementen `x8` und `x9`.
-   Die leere Menge `{ }` bedeutet, dass keine Variable kontrolliert werden muss, um den kausalen Effekt zu identifizieren.
-   Alle Variablen werden als gemessen vorausgesetzt.
-   Es ist m√∂glich, dass es keine L√∂sung gibt, dass es also keine Adjustierungsmenge gibt, um den kausalen Effekt zu identifizieren. Wenn dies der Fall sein sollte, w√§hlen Sie "keine L√∂sung".

## Answerlist

-   { x1 , x2 , x3 , x4 , x5 , x6 }
-   { x3, x4 }
-   { x8 }
-   { x6, x7 }
-   { x2, x5 }

### L

Der DAG wirkt auf den ersten Blick sehr √ºberfordernd, aber ist gar nicht schwer zu l√∂sen. Es gibt einen direkten kausalen Pfad von `x7` auf `x8`. Schaut man sich den DAG jetzt genauer an, dann sieht man dass es f√ºr jede Zwischenvariable einen einzelnen Pfad gibt, hei√üt z.B. es gibt einen einzelnen Pfad der nur √ºber `x5` oder nur √ºber `x3` f√ºhrt. Alle diese Variablen sinf f√ºr diese Pfade auch Confounder, also m√ºssen wir alle Zwischenvariablen kontrollieren.

Die L√∂sung ist also: { x1 , x2 , x3 , x4 , x5 , x6 }
:::
